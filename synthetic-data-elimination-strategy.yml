openapi: 3.1.1
info:
  title: AlphaForge Synthetic Data Elimination & Gapless-Crypto-Data Integration Strategy
  version: "0.4.0"
  description: |
    Comprehensive analysis of synthetic/fake data usage patterns and
    strategic replacement with gapless-crypto-data authentic market data

components:
  schemas:
    SyntheticDataPattern:
      type: object
      properties:
        location:
          type: string
        pattern_type:
          type: string
          enum: [random_generation, test_data, benchmark_data, fallback_mechanism]
        criticality:
          type: string
          enum: [production_critical, development_only, test_framework, benchmark_suite]
        replacement_feasibility:
          type: string
          enum: [high, medium, low, not_applicable]

audit_results:
  production_critical:
    - location: "alphagen_qlib/stock_data.py"
      pattern_type: "fallback_mechanism"
      description: "Synthetic data fallback for qlib failures"
      status: "COMPLETED - CryptoDataProvider integration"
      replacement: "gapless-crypto-data integration completed"

  data_generation_frameworks:
    - location: "gan/utils/data.py"
      pattern_type: "fallback_mechanism"
      description: "StockData wrapper for get_data_my function with pickle caching"
      criticality: "production_critical"
      replacement_feasibility: "high"
      status: "COMPLETED - CryptoDataProvider integration"
      integration_opportunity: |
        COMPLETED: Replaced StockData calls with CryptoDataProvider for authentic crypto market data.
        Maintains same interface while providing real OHLCV + microstructure data.

    - location: "dso/task/regression/dataset.py"
      pattern_type: "benchmark_data"
      description: "Synthetic benchmark dataset generation for DSO regression tasks"
      criticality: "development_only"
      replacement_feasibility: "medium"
      status: "COMPLETED - crypto_alpha_dataset.py implementation"
      integration_opportunity: |
        COMPLETED: Created crypto-based benchmark datasets using gapless-crypto-data for
        realistic alpha factor discovery validation with CryptoAlphaBenchmarkDataset class.

    - location: "dso/task/regression/mat_mult_benchmark.py"
      pattern_type: "benchmark_data"
      description: "Matrix multiplication performance benchmarking with random data"
      criticality: "benchmark_suite"
      replacement_feasibility: "low"
      integration_opportunity: "N/A - performance testing only"

    - location: "dso/task/regression/polyfit.py"
      pattern_type: "random_generation"
      description: "Polynomial coefficient generation for symbolic regression"
      criticality: "development_only"
      replacement_feasibility: "low"
      integration_opportunity: "N/A - mathematical coefficient generation"

  test_framework_data:
    gplearn_tests:
      - location: "gplearn/tests/test_examples.py"
        pattern_type: "test_data"
        description: "Random uniform data for genetic programming tests"
        criticality: "test_framework"
        replacement_feasibility: "medium"
        integration_opportunity: |
          Replace synthetic test data with historical crypto market data subsets
          for more realistic genetic programming validation.

      - location: "gplearn/tests/test_genetic.py"
        pattern_type: "test_data"
        description: "Random state testing for genetic algorithm reproducibility"
        criticality: "test_framework"
        replacement_feasibility: "low"
        integration_opportunity: "N/A - deterministic testing requirement"

    dso_tests:
      - location: "dso/task/regression/test_sklearn.py"
        pattern_type: "test_data"
        description: "Random data for sklearn compatibility testing"
        criticality: "test_framework"
        replacement_feasibility: "low"
        integration_opportunity: "N/A - framework compatibility testing"

  baostock_integration:
    - location: "data_collection/fetch_baostock_data.py"
      pattern_type: "fallback_mechanism"
      description: "Stock market data collection using baostock API"
      criticality: "production_critical"
      replacement_feasibility: "high"
      status: "COMPLETED - Replaced with data_collection/fetch_crypto_data.py"
      integration_opportunity: |
        COMPLETED: Replaced baostock stock data with gapless-crypto-data cryptocurrency data.
        New implementation provides superior data quality with zero-gap coverage and microstructure indicators.

integration_strategy:
  phase_1_critical_production:
    priority: 1
    description: "Replace production-critical synthetic data with authentic crypto data"
    status: "COMPLETED"
    targets:
      - gan/utils/data.py: "COMPLETED - Replaced StockData with CryptoDataProvider"
      - data_collection/fetch_crypto_data.py: "COMPLETED - Created gapless-crypto-data implementation"

  phase_2_development_enhancement:
    priority: 2
    description: "Enhance development frameworks with authentic market data"
    status: "IN_PROGRESS"
    targets:
      - dso/task/regression/crypto_alpha_dataset.py: "COMPLETED - Created crypto benchmark datasets"
      - gplearn/tests/test_examples.py: "PENDING - Use historical crypto data for realistic testing"

  phase_3_comprehensive_migration:
    priority: 3
    description: "Complete migration of all feasible synthetic data usage"
    targets:
      - Complete audit of remaining random number usage
      - Establish crypto data validation frameworks
      - Document authentic data usage patterns

gapless_crypto_data_opportunities:
  high_priority_integrations:
    - component: "gan/utils/data.py"
      current_implementation: "get_data_my with qlib/pickle fallback"
      proposed_replacement: "CryptoDataProvider with multi-symbol support"
      benefits:
        - authentic_ohlcv_data
        - microstructure_indicators
        - zero_gap_coverage
        - temporal_integrity_compliance

    - component: "data_collection/fetch_baostock_data.py"
      current_implementation: "baostock Chinese stock market API"
      proposed_replacement: "gapless-crypto-data Binance spot/futures data"
      benefits:
        - global_cryptocurrency_coverage
        - higher_frequency_data_availability
        - superior_data_quality_validation
        - consistent_api_interface

  medium_priority_integrations:
    - component: "DSO benchmark datasets"
      current_implementation: "synthetic polynomial expressions"
      proposed_replacement: "crypto market pattern recognition tasks"
      benefits:
        - realistic_alpha_discovery_validation
        - market_microstructure_pattern_learning
        - production_environment_simulation

    - component: "gplearn test frameworks"
      current_implementation: "random uniform test data"
      proposed_replacement: "historical crypto market segments"
      benefits:
        - realistic_genetic_programming_validation
        - market_condition_robustness_testing
        - temporal_pattern_recognition_validation

implementation_specifications:
  crypto_data_provider_expansion:
    current_capabilities:
      - binance_spot_market_data
      - 11_column_microstructure_features
      - ohlcv_plus_trade_metrics
      - rolling_statistics_normalization

    proposed_enhancements:
      - futures_market_data_integration
      - multi_exchange_support: [binance, coinbase, kraken]
      - higher_frequency_data: [1m, 5m, 15m]
      - additional_symbols: [top_100_crypto_pairs]

  data_pipeline_architecture:
    current_pattern:
      - qlib_primary_with_synthetic_fallback
      - pickle_caching_for_performance
      - symbol_date_range_specification

    proposed_pattern:
      - gapless_crypto_data_primary
      - intelligent_symbol_mapping
      - automatic_data_validation
      - temporal_integrity_enforcement

validation_criteria:
  synthetic_data_elimination:
    - zero_random_normal_distribution_usage
    - authentic_market_data_only_tolerance
    - temporal_integrity_compliance
    - microstructure_pattern_preservation

  integration_success_metrics:
    - data_loading_performance_maintained
    - api_interface_compatibility_preserved
    - authentic_data_quality_validated
    - production_system_stability_confirmed

migration_roadmap:
  immediate_actions:
    - audit_gan_utils_data_integration_opportunities
    - design_baostock_replacement_architecture
    - prototype_crypto_benchmark_datasets

  short_term_implementation:
    - replace_gan_utils_data_with_crypto_provider
    - migrate_baostock_collection_to_gapless_crypto_data
    - validate_production_system_integration

  long_term_optimization:
    - comprehensive_multi_exchange_support
    - advanced_microstructure_feature_engineering
    - real_time_data_streaming_capabilities

compliance_requirements:
  temporal_integrity:
    - no_future_data_access_in_historical_analysis
    - proper_train_test_temporal_boundaries
    - exception_only_failure_for_data_violations

  data_authenticity:
    - zero_synthetic_data_tolerance_production
    - authentic_market_source_verification
    - microstructure_pattern_validation

  framework_compatibility:
    - existing_api_interface_preservation
    - backward_compatibility_maintenance
    - performance_regression_prevention

implementation_results:
  phase_1_production_critical_implementations:
    - component: "gan/utils/data.py"
      implementation_type: "StockData replacement with CryptoDataProvider integration"
      approach: "Instrument mapping to crypto symbols with authentic market data loading"
      deliverables:
        - "_map_instruments_to_crypto() function for seamless migration"
        - "_load_crypto_stockdata() wrapper maintaining StockData interface"
        - "Pickle caching preservation for performance"
      crypto_symbols_supported: ["BTCUSDT", "ETHUSDT", "ADAUSDT", "BNBUSDT", "XRPUSDT", "SOLUSDT", "DOTUSDT", "LINKUSDT"]

    - component: "data_collection/fetch_crypto_data.py"
      implementation_type: "Complete baostock API replacement"
      approach: "CryptoDataManager class with gapless-crypto-data backend"
      deliverables:
        - "BinancePublicDataCollector integration for authentic market data"
        - "Parallel data collection with ProcessPoolExecutor"
        - "25-symbol default cryptocurrency portfolio"
        - "qlib format export compatibility"
        - "24/7 crypto market calendar generation"
      data_coverage: "2020-01-01 to present with zero-gap historical coverage"

    - component: "dso/task/regression/crypto_alpha_dataset.py"
      implementation_type: "Synthetic benchmark replacement for DSO alpha factor discovery"
      approach: "CryptoAlphaBenchmarkDataset class with authentic market pattern recognition"
      deliverables:
        - "Cryptocurrency market data integration for realistic alpha discovery validation"
        - "16 microstructure features including order flow, trade intensity, rolling statistics"
        - "Temporal train/test splits maintaining chronological integrity"
        - "Forward return prediction targets with configurable horizons"
        - "DSO RegressionTask compatibility via CSV export format"
        - "Multiple benchmark configurations (short-term, medium-term, portfolio)"
      market_realism: "Authentic crypto volatility clustering and market microstructure patterns"

    - component: "alphagen_qlib/stock_data.py"
      implementation_type: "Synthetic fallback elimination"
      approach: "CryptoDataProvider integration via _load_exprs_baostock"
      deliverables:
        - "Removed np.random.normal synthetic data generation"
        - "Authentic crypto market data for all expression evaluation"
        - "Maintained existing API interface for backward compatibility"

metadata:
  analysis_date: "2025-09-17"
  audit_scope: "comprehensive_codebase_synthetic_data_patterns"
  framework_version: "gapless-crypto-data@2.6.0"
  integration_status: "phase_1_production_critical_completed"
  last_updated: "2025-09-17"
  phase_1_completions:
    - "alphagen_qlib/stock_data.py: CryptoDataProvider integration"
    - "gan/utils/data.py: StockData replacement with crypto provider"
    - "data_collection/fetch_crypto_data.py: baostock replacement implementation"
  active_phase: "phase_2_development_enhancement"
  phase_2_completions:
    - "dso/task/regression/crypto_alpha_dataset.py: DSO crypto benchmark datasets"